{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>ninejs</code>","text":""},{"location":"#add-tooltip","title":"Add tooltip","text":"<pre><code>from plotnine import ggplot, aes, geom_point, theme_minimal\nfrom plotnine.data import anscombe_quartet\n\nfrom ninejs import interactive, css, to_html\n\ngg = (\n    ggplot(\n        data=anscombe_quartet,\n        mapping=aes(x=\"x\", y=\"y\", tooltip=\"dataset\"),\n    )\n    + geom_point(size=7, alpha=0.5)\n    + theme_minimal()\n)\n\n(\n    interactive(gg=gg)\n    + css(\".tooltip{font-size: 2em;}\")\n    + to_html(\"docs/iframes/point.html\")\n)\n</code></pre>"},{"location":"#tooltip-grouping","title":"Tooltip grouping","text":"<pre><code>from plotnine import ggplot, aes, geom_point, theme_minimal\nfrom plotnine.data import anscombe_quartet\n\nfrom ninejs import interactive, css, to_html\n\ngg = (\n    ggplot(\n        data=anscombe_quartet,\n        mapping=aes(\n            x=\"x\",\n            y=\"y\",\n            color=\"dataset\",\n            tooltip=\"dataset\",\n            data_id=\"dataset\",\n        ),\n    )\n    + geom_point(size=7, alpha=0.5)\n    + theme_minimal()\n)\n\n(\n    interactive(gg=gg)\n    + css(from_dict={\".tooltip\": {\"font-size\": \"3em\"}})\n    + to_html(\"docs/iframes/quickstart2.html\")\n)\n</code></pre>"},{"location":"#line-chart","title":"Line chart","text":"<pre><code>gg = (\n    ggplot(\n        data=anscombe_quartet,\n        mapping=aes(\n            x=\"x\",\n            y=\"y\",\n            color=\"dataset\",\n            tooltip=\"dataset\",\n        ),\n    )\n    + geom_line(size=4, alpha=0.5)\n    + theme_minimal()\n)\n\n(\n    interactive(gg=gg)\n    + css(from_dict={\".tooltip\": {\"font-size\": \"3em\"}})\n    + to_html(\"docs/iframes/line.html\")\n)\n</code></pre>"},{"location":"#barplot","title":"Barplot","text":"<pre><code>df = pd.DataFrame({\"category\": [\"A\", \"B\", \"C\"], \"value\": [3, 7, 5]})\ndf[\"tooltip\"] = df[\"category\"].astype(str) + \" (\" + df[\"value\"].astype(str) + \")\"\n\n\ngg = (\n    ggplot(df, aes(x=\"category\", y=\"value\", tooltip=\"tooltip\"))\n    + geom_col()\n    + theme_classic()\n)\n\n(\n    interactive(gg=gg)\n    + to_html(\"docs/iframes/bar.html\")\n)\n</code></pre>"},{"location":"reference/css/","title":"CSS","text":""},{"location":"reference/css/#ninejs.css","title":"<code>ninejs.css</code>","text":"<p>Utility class to handle CSS injection for interactive plots.</p> <p>This class provides multiple ways to load CSS: directly from a string, from a dictionary, or from a CSS file. It is intended to be combined with <code>interactive</code> plots.</p> <p>Attributes:</p> Name Type Description <code>css_content</code> <code>str</code> <p>The CSS rules to be injected.</p> Example <pre><code># From string\ncss_obj = css(\".tooltip {color: red;}\")\n\n# From dict\ncss_obj = css(from_dict={\".tooltip\": {\"color\": \"blue\"}})\n\n# From file\ncss_obj = css(from_file=\"style.css\")\n</code></pre>"},{"location":"reference/interactive/","title":"Interactive","text":""},{"location":"reference/interactive/#ninejs.main.interactive","title":"<code>ninejs.main.interactive</code>","text":"<p>Wrapper for a plotnine <code>ggplot</code> object to make it interactive.</p> <p>This class converts a static <code>ggplot</code> object into an interactive plot by leveraging <code>_InteractivePlot</code>. It automatically extracts tooltips and grouping information from the plot mapping if present.</p> <p>Attributes:</p> Name Type Description <code>gg</code> <code>ggplot</code> <p>The original plotnine <code>ggplot</code> object.</p> <code>mp</code> <code>_InteractivePlot</code> <p>The interactive plot instance created from the ggplot figure.</p> Example <pre><code>from plotnine import ggplot, aes, geom_point\nfrom ninejs import interactive, css, to_html\n\np = ggplot(df, aes(\"x\", \"y\", tooltip=\"label\")) + geom_point()\n(\n    interactive(p)\n    + css(from_file=\"style.css\")\n    + to_html(\"chart.html\")\n)\n</code></pre>"}]}